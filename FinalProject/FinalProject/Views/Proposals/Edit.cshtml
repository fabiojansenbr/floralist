@model FinalProject.Models.Proposal
@inject FinalProject.Services.IRepository repository

@{
    //I could use a view model here instead of injecting these lists
    var customerItems = repository.Customers.Select(x => new SelectListItem(x.Name, x.Id.ToString()));
    var designerItems = repository.Designers.Select(x => new SelectListItem(x.Name, x.Id.ToString()));

    ViewData["Title"] = "Proposals";
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Edit</title>
</head>
<body>

    <h4>Proposal</h4>
    <hr />
    <div class="row">
        <div class="col-md-4">
            <form asp-action="Edit">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input type="hidden" asp-for="Id" />
                <div class="form-group">
                    <label asp-for="Customer" class="control-label"></label>
                    <select asp-for="CustomerId" asp-items="@customerItems" class="form-control"></select>
                    <span asp-validation-for="CustomerId" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Title" class="control-label"></label>
                    <input asp-for="Title" class="form-control" />
                    <span asp-validation-for="Title" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Description" class="control-label"></label>
                    <input asp-for="Description" class="form-control" />
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <p>
                        <!-- NOTE: we send the proposalId along to the search page so we know
            which proposal we're adding items to -->
                        @Html.ActionLink("Add Item", "ImageSearch", new { proposalId = Model.Id })
                    </p>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>
                                    Image
                                </th>
                                <th>
                                    Caption
                                </th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.ProposalItems)
                            {
                                <tr>
                                    <td>
                                        <img src="~/images/@item.Image.FileName" width=200 height=200 style="object-fit:cover" />
                                        @*@Html.DisplayFor(modelItem => item.Image.FileName)*@
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Caption)
                                    </td>
                                    <td>
                                        <!-- NOTE these don't work properly yet -->
                                        @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                                        @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="form-group">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </form>
        </div>
    </div>

    <div>
        <a asp-action="Index">Back to List</a>
    </div>

    @section Scripts {
        @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    }
</body>
</html>
